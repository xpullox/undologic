<?php
/**
 * Application level Controller
 *
 * This file is application-wide controller file. You can put all
 * application-wide controller-related methods here.
 *
 * CakePHP(tm) : Rapid Development Framework (https://cakephp.org)
 * Copyright (c) Cake Software Foundation, Inc. (https://cakefoundation.org)
 *
 * Licensed under The MIT License
 * For full copyright and license information, please see the LICENSE.txt
 * Redistributions of files must retain the above copyright notice.
 *
 * @copyright     Copyright (c) Cake Software Foundation, Inc. (https://cakefoundation.org)
 * @link          https://cakephp.org CakePHP(tm) Project
 * @package       app.Controller
 * @since         CakePHP(tm) v 0.2.9
 * @license       https://opensource.org/licenses/mit-license.php MIT License
 */

App::uses('Controller', 'Controller');

/**
 * Application Controller
 *
 * Add your application-wide methods in the class below, your controllers
 * will inherit them.
 *
 * @package		app.Controller
 * @link		https://book.cakephp.org/2.0/en/controllers.html#the-app-controller
 */
class AppController extends Controller {

	public $components = array(
		'Secure','Session'
	);

	function beforeFilter()
	{
		parent::beforeFilter(); // TODO: Change the autogenerated stub
		$this->Secure->requirePasswordExcept(array(), $_SERVER, $this->Session);

        $isAuthenticated = ClassRegistry::init('User','Model')->isUserAuthenticated(
            $this->Session->read('token'),
            $this->params->params,
            getallheaders()
        );
        if (!$isAuthenticated) {
            $this->Session->setFlash("You are not authenticated for this location: Please login");
            $this->redirect(array(
                'admin' => false,
                'controller' => 'Users', 'action' => 'login'));
            die ('should have redirected to login');
        } else {
            $this->set('userInfo', $isAuthenticated);
            $this->set('isLoggedIn', true);
        }

	}


    function setupLanguage()
    {
        //language stuff
        //does get info exist, this will be priority
        if (isset($_GET['Lang'])) {
            $this->Language->setGet($_GET['Lang']);
        }
        //if there params of what language we should be using
        if (isset($this->params['language'])) {
            $this->Language->setParams($this->params['language']);
        }
        //or we are going to check out session of cookie for a already selected language
        $this->Language->setSession($this->Session);
        $this->Language->setCookie($this->Cookie);
        //and fall back to the default if not set yet
        $this->Language->setDefaultLanguage(Configure::read('Config.language'));
        $currLang = $this->Language->currLang();

        $this->Language->setCurrLang($currLang);

        //pr ($currLang);exit;
        //echo 'hi';
        switch ($currLang) {
            case 'fre':

                Configure::write('currLang', $currLang);
                $this->set('langFR', TRUE);
                $this->set('lang', 'fr');
                $this->set('currLang', $currLang);
                $this->Cookie->write('currLang', 'fre', NULL, '+350 day');
                Configure::write('Config.language', 'fre');
                Configure::write("UpdateCase.language", "fre"); //define the language in app_controller / globally
                break;
            default:
                Configure::write('currLang', $currLang);
                $this->set('lang', 'en');
                $this->set('langEN', TRUE);
                $this->set('currLang', $currLang);
                $this->Cookie->write('currLang', 'eng', NULL, '+350 day');
                Configure::write('Config.language', 'eng');
                Configure::write("UpdateCase.language", "eng"); //define the language in app_controller / globally
        }


        //pr (Configure::read('currLang'));
        // exit;
    }

    function setFrench() {
        $this->Language->setCurrLang('fre', $this->Session, $this->Cookie);
    }

    function setEnglish() {
        $this->Language->setCurrLang('eng', $this->Session, $this->Cookie);
        $this->Cookie->write('currLang', 'eng', NULL, '+350 day');
    }

    function currentLang() {
        $currLang = $this->Language->currLang();
        return $currLang;
    }

    function isFrench() {
        $currLang = $this->Language->currLang();
        if ($currLang == 'fre') {
            return TRUE;
        } else {
            return FALSE;
        }
    }

    function jsonHeaders($data) {
        header('Content-Type: application/json');
        echo $data;
        exit;
    }
}
